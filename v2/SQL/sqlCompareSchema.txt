

/*
Deployment script for EduXpressDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.

replace/commented out SQLCMD variables with actual name
replace GO with ;
*/

;--GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


;/*--GO
--:setvar DatabaseName "EduXpressDB"
--:setvar DefaultFilePrefix "EduXpressDB"
--:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER2016\MSSQL\DATA\"
--:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER2016\MSSQL\DATA\"
*/

;--GO
--:on error exit
;--GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
--:setvar __IsSqlCmdEnabled "True"
--;--GO
--IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
--    BEGIN
--        ----PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
--       SET NOEXEC ON;
--   END


;--GO
USE [master];


;--GO

IF (DB_ID(N'EduXpressDB') IS NOT NULL) 
BEGIN
    ALTER DATABASE [EduXpressDB]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [EduXpressDB];
END

;--GO
PRINT N'Creating EduXpressDB...'
;--GO
CREATE DATABASE [EduXpressDB]
   -- ON 
   -- PRIMARY(NAME = [EduXpressDB], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
   -- LOG ON (NAME = [EduXpressDB_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE French_CI_AS
;--GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'EduXpressDB')
    BEGIN
        ALTER DATABASE [EduXpressDB]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


;--GO
USE [EduXpressDB];


;--GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'EduXpressDB')
    BEGIN
        ALTER DATABASE [EduXpressDB]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


;--GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'EduXpressDB')
    BEGIN
        ALTER DATABASE [EduXpressDB]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


;--GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'EduXpressDB')
    BEGIN
        ALTER DATABASE [EduXpressDB]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


;--GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'EduXpressDB')
    BEGIN
        ALTER DATABASE [EduXpressDB]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


;--GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'EduXpressDB')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [EduXpressDB]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


;--GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'EduXpressDB')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [EduXpressDB]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


;--GO
ALTER DATABASE [EduXpressDB]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


;--GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'EduXpressDB')
    BEGIN
        ALTER DATABASE [EduXpressDB]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


;--GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'EduXpressDB')
    BEGIN
        ALTER DATABASE [EduXpressDB]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


;--GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'EduXpressDB')
    BEGIN
        ALTER DATABASE [EduXpressDB]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


;--GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'EduXpressDB')
    BEGIN
        ALTER DATABASE [EduXpressDB]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


;--GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'EduXpressDB')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


;--GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


;--GO
PRINT N'Creating [dbo].[AcademicYear]...';


;--GO
CREATE TABLE [dbo].[AcademicYear] (
    [SchoolYear] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_AcademicYear] PRIMARY KEY CLUSTERED ([SchoolYear] ASC)
);


;--GO
PRINT N'Creating [dbo].[Appointments]...';


;--GO
CREATE TABLE [dbo].[Appointments] (
    [UniqueID]       INT            IDENTITY (1, 1) NOT NULL,
    [Type]           INT            NULL,
    [StartDate]      SMALLDATETIME  NULL,
    [EndDate]        SMALLDATETIME  NULL,
    [AllDay]         BIT            NULL,
    [Subject]        NVARCHAR (50)  NULL,
    [Location]       NVARCHAR (50)  NULL,
    [Description]    NVARCHAR (MAX) NULL,
    [Status]         INT            NULL,
    [Label]          INT            NULL,
    [ResourceID]     INT            NULL,
    [ResourceIDs]    NVARCHAR (MAX) NULL,
    [ReminderInfo]   NVARCHAR (MAX) NULL,
    [RecurrenceInfo] NVARCHAR (MAX) NULL,
    [TimeZoneId]     NVARCHAR (MAX) NULL,
    [CustomField1]   NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_Appointments] PRIMARY KEY CLUSTERED ([UniqueID] ASC)
);


;--GO
PRINT N'Creating [dbo].[BusInformation]...';


;--GO
CREATE TABLE [dbo].[BusInformation] (
    [id]                 INT            IDENTITY (1, 1) NOT NULL,
    [BusNo]              NVARCHAR (10)  NOT NULL,
    [DriverName]         NVARCHAR (150) NOT NULL,
    [ContactNo]          NVARCHAR (60)  NOT NULL,
    [AssistantName]      NVARCHAR (150) NULL,
    [AssistantContactNo] NVARCHAR (60)  NULL,
    CONSTRAINT [PK_BusInformation] PRIMARY KEY CLUSTERED ([id] ASC)
);


;--GO
PRINT N'Creating [dbo].[Classes]...';


;--GO
CREATE TABLE [dbo].[Classes] (
    [ClassName]    NVARCHAR (60)  NOT NULL,
    [SectionName]  NVARCHAR (100) NULL,
    [SectionAbrev] NVARCHAR (50)  NULL,
    [Cycle]        NVARCHAR (60)  NULL,
    CONSTRAINT [PK_Classes] PRIMARY KEY CLUSTERED ([ClassName] ASC)
);


;--GO
PRINT N'Creating [dbo].[CompanyProfile]...';


;--GO
CREATE TABLE [dbo].[CompanyProfile] (
    [CompanyDetailsID] INT             IDENTITY (1, 1) NOT NULL,
    [SchoolName]       NVARCHAR (250)  NOT NULL,
    [SchoolMotto]      NVARCHAR (150)  NULL,
    [OfficePhone]      NVARCHAR (30)   NULL,
    [OfficeFax]        NVARCHAR (30)   NULL,
    [Email]            NVARCHAR (80)   NOT NULL,
    [Cellphone]        NVARCHAR (30)   NOT NULL,
    [SchoolWebsite]    NVARCHAR (80)   NULL,
    [AddressStreet]    NVARCHAR (100)  NOT NULL,
    [AddressSuburb]    NVARCHAR (100)  NOT NULL,
    [AddressTown]      NVARCHAR (100)  NOT NULL,
    [Country]          NVARCHAR (100)  NOT NULL,
    [RegistrationNo]   NVARCHAR (80)   NULL,
    [TaxNumber]        NVARCHAR (80)   NULL,
    [VATNumber]        NVARCHAR (80)   NULL,
    [VATRate]          DECIMAL (19, 2) NULL,
    [VATRegistered]    BIT             NOT NULL,
    [BankName]         NVARCHAR (100)  NULL,
    [BankAccName]      NVARCHAR (100)  NULL,
    [AccountNumber]    NVARCHAR (80)   NULL,
    [AccountType]      NVARCHAR (80)   NULL,
    [Branch]           NVARCHAR (100)  NULL,
    [BranchCode]       NVARCHAR (60)   NULL,
    [SwiftCode]        NVARCHAR (70)   NULL,
    [SchoolLo;--GO]       IMAGE           NULL,
    CONSTRAINT [PK_CompanyProfile] PRIMARY KEY CLUSTERED ([CompanyDetailsID] ASC)
);


;--GO
PRINT N'Creating [dbo].[CourseFee]...';


;--GO
CREATE TABLE [dbo].[CourseFee] (
    [CourseFeeID]          INT             IDENTITY (1, 1) NOT NULL,
    [ClassName]            NVARCHAR (60)   NOT NULL,
    [FeeName]              NVARCHAR (100)  NOT NULL,
    [Month]                NVARCHAR (50)   NOT NULL,
    [Fee]                  DECIMAL (18, 2) NOT NULL,
    [MonthNo]              INT             NULL,
    [feeStructurePerMonth] BIT             NULL,
    CONSTRAINT [PK_CourseFee] PRIMARY KEY CLUSTERED ([CourseFeeID] ASC)
);


;--GO
PRINT N'Creating [dbo].[CourseFeePayment]...';


;--GO
CREATE TABLE [dbo].[CourseFeePayment] (
    [CourseFeePaymentID] INT             NOT NULL,
    [PaymentID]          NVARCHAR (50)   NOT NULL,
    [StudentNumber]      NVARCHAR (50)   NOT NULL,
    [SchoolYear]         NVARCHAR (50)   NOT NULL,
    [TotalFee]           DECIMAL (18, 2) NOT NULL,
    [DiscountPer]        DECIMAL (18, 2) NOT NULL,
    [DiscountAmt]        DECIMAL (18, 2) NOT NULL,
    [PreviousDue]        DECIMAL (18, 2) NOT NULL,
    [Fine]               DECIMAL (18, 2) NOT NULL,
    [GrandTotal]         DECIMAL (18, 2) NOT NULL,
    [TotalPaid]          DECIMAL (18, 2) NOT NULL,
    [ModeOfPayment]      NVARCHAR (100)  NOT NULL,
    [PaymentDate]        DATE            NOT NULL,
    [PaymentDue]         DECIMAL (18, 2) NOT NULL,
    [Student_Class]      NVARCHAR (50)   NULL,
    [Employee]           NVARCHAR (60)   NULL,
    CONSTRAINT [PK_CourseFeePayment] PRIMARY KEY CLUSTERED ([CourseFeePaymentID] ASC)
);


;--GO
PRINT N'Creating [dbo].[CourseFeePayment_Join]...';


;--GO
CREATE TABLE [dbo].[CourseFeePayment_Join] (
    [CourseFeePayment_J_ID] INT             IDENTITY (1, 1) NOT NULL,
    [C_PaymentID]           INT             NOT NULL,
    [FeeName]               NVARCHAR (250)  NOT NULL,
    [Fee]                   DECIMAL (18, 2) NOT NULL,
    [Month]                 NVARCHAR (50)   NOT NULL,
    CONSTRAINT [PK_CourseFeePayment_Join] PRIMARY KEY CLUSTERED ([CourseFeePayment_J_ID] ASC)
);


;--GO
PRINT N'Creating [dbo].[Dashboards]...';


;--GO
CREATE TABLE [dbo].[Dashboards] (
    [DashboardID]       INT             IDENTITY (1, 1) NOT NULL,
    [DashboardStudent]  VARBINARY (MAX) NULL,
    [DashboardFinance]  VARBINARY (MAX) NULL,
    [DashboardFeesPaid] VARBINARY (MAX) NULL,
    CONSTRAINT [PK_Dashboards] PRIMARY KEY CLUSTERED ([DashboardID] ASC)
);


;--GO
PRINT N'Creating [dbo].[Discount]...';


;--GO
CREATE TABLE [dbo].[Discount] (
    [DiscountID] INT             IDENTITY (1, 1) NOT NULL,
    [StudentID]  INT             NOT NULL,
    [FeeType]    NVARCHAR (50)   NOT NULL,
    [Discount]   DECIMAL (18, 2) NOT NULL,
    CONSTRAINT [PK_Discount] PRIMARY KEY CLUSTERED ([DiscountID] ASC)
);


;--GO
PRINT N'Creating [dbo].[EmailSetting]...';


;--GO
CREATE TABLE [dbo].[EmailSetting] (
    [EmailSettingID]   INT           IDENTITY (1, 1) NOT NULL,
    [ServerName]       NVARCHAR (50) NULL,
    [SMTPAddress]      NCHAR (100)   NULL,
    [SenderName]       NVARCHAR (50) NULL,
    [Username]         NVARCHAR (50) NULL,
    [Password]         NVARCHAR (50) NULL,
    [Port]             INT           NULL,
    [TLS_SSL_Required] NVARCHAR (50) NULL,
    [IsDefault]        NVARCHAR (50) NULL,
    [IsActive]         NVARCHAR (50) NULL,
    CONSTRAINT [PK_EmailSetting] PRIMARY KEY CLUSTERED ([EmailSettingID] ASC)
);


;--GO
PRINT N'Creating [dbo].[Employees]...';


;--GO
CREATE TABLE [dbo].[Employees] (
    [EmployeeID]      NCHAR (5)     NOT NULL,
    [Surname]         NVARCHAR (20) NOT NULL,
    [FirstName]       NVARCHAR (10) NOT NULL,
    [Title]           NVARCHAR (30) NULL,
    [TitleOfCourtesy] NVARCHAR (25) NULL,
    [BirthDate]       DATETIME      NULL,
    [HireDate]        DATETIME      NULL,
    [Address]         NVARCHAR (60) NULL,
    [City]            NVARCHAR (15) NULL,
    [Province]        NVARCHAR (15) NULL,
    [PostalCode]      NVARCHAR (10) NULL,
    [Country]         NVARCHAR (15) NULL,
    [Phone]           NVARCHAR (24) NULL,
    [Email]           NVARCHAR (24) NULL,
    [Department]      NVARCHAR (24) NULL,
    [ReportsTo]       INT           NULL,
    [Notes]           NTEXT         NULL,
    [Photo]           IMAGE         NULL,
    CONSTRAINT [PK_Employees] PRIMARY KEY CLUSTERED ([EmployeeID] ASC)
);


;--GO
PRINT N'Creating [dbo].[ExchangeRates]...';


;--GO
CREATE TABLE [dbo].[ExchangeRates] (
    [id]          INT             IDENTITY (1, 1) NOT NULL,
    [USDCDF]      DECIMAL (18, 2) NULL,
    [USDEUR]      DECIMAL (18, 2) NULL,
    [EURCDF]      DECIMAL (18, 2) NULL,
    [LastUpdated] DATETIME2 (7)   NULL,
    CONSTRAINT [PK_ExchangeRates] PRIMARY KEY CLUSTERED ([id] ASC)
);


;--GO
PRINT N'Creating [dbo].[Fee]...';


;--GO
CREATE TABLE [dbo].[Fee] (
    [FeeName] NVARCHAR (100) NOT NULL,
    CONSTRAINT [PK_Fee] PRIMARY KEY CLUSTERED ([FeeName] ASC)
);


;--GO
PRINT N'Creating [dbo].[LedgerBook]...';


;--GO
CREATE TABLE [dbo].[LedgerBook] (
    [LedgerBookID] INT             IDENTITY (1, 1) NOT NULL,
    [Date]         DATETIME2 (7)   NOT NULL,
    [Name]         NVARCHAR (200)  NOT NULL,
    [LedgerNo]     NVARCHAR (200)  NOT NULL,
    [Label]        NVARCHAR (200)  NOT NULL,
    [Debit]        DECIMAL (18, 2) NOT NULL,
    [Credit]       DECIMAL (18, 2) NOT NULL,
    [PartyID]      NVARCHAR (50)   NULL,
    CONSTRAINT [PK_LedgerBook] PRIMARY KEY CLUSTERED ([LedgerBookID] ASC)
);


;--GO
PRINT N'Creating [dbo].[Logs]...';


;--GO
CREATE TABLE [dbo].[Logs] (
    [ID]        INT            IDENTITY (1, 1) NOT NULL,
    [UserID]    NVARCHAR (50)  NULL,
    [Operation] NVARCHAR (500) NULL,
    [Location]  NVARCHAR (50)  NULL,
    [Date]      DATETIME2 (7)  NULL,
    CONSTRAINT [PK_Logs] PRIMARY KEY CLUSTERED ([ID] ASC)
);


;--GO
PRINT N'Creating [dbo].[MarksEntry]...';


;--GO
CREATE TABLE [dbo].[MarksEntry] (
    [MarksEntryID]  INT            NOT NULL,
    [StudentNumber] NVARCHAR (50)  NOT NULL,
    [SchoolYear]    NVARCHAR (50)  NOT NULL,
    [EntryDate]     DATETIME       NOT NULL,
    [Student_Class] NVARCHAR (100) NOT NULL,
    [Result]        NVARCHAR (50)  NULL,
    CONSTRAINT [PK_MarksEntry] PRIMARY KEY CLUSTERED ([MarksEntryID] ASC)
);


;--GO
PRINT N'Creating [dbo].[Preferences]...';


;--GO
CREATE TABLE [dbo].[Preferences] (
    [PreferencesID]                INT           IDENTITY (1, 1) NOT NULL,
    [LanguageAuto]                 BIT           NULL,
    [Language]                     NVARCHAR (15) NULL,
    [NotificationRegUpDel]         TINYINT       NULL,
    [NotificationInvoice]          TINYINT       NULL,
    [CurrencySymbol]               NVARCHAR (10) NULL,
    [CurrencySymbolPositionBefore] BIT           NULL,
    CONSTRAINT [PK_Preferences] PRIMARY KEY CLUSTERED ([PreferencesID] ASC)
);


;--GO
PRINT N'Creating [dbo].[Registration]...';


;--GO
CREATE TABLE [dbo].[Registration] (
    [UserNameID]     INT           IDENTITY (1, 1) NOT NULL,
    [UserName]       NVARCHAR (60) NOT NULL,
    [UserPassword]   NVARCHAR (60) NOT NULL,
    [UserType]       NVARCHAR (50) NOT NULL,
    [Name]           NVARCHAR (60) NULL,
    [Surname]        NVARCHAR (60) NULL,
    [PhoneNumber]    NVARCHAR (50) NULL,
    [Email]          NVARCHAR (50) NULL,
    [EmployeeNumber] NVARCHAR (50) NULL,
    [Picture]        IMAGE         NULL,
    CONSTRAINT [PK_Registration] PRIMARY KEY CLUSTERED ([UserNameID] ASC)
);


;--GO
PRINT N'Creating [dbo].[Resources]...';


;--GO
CREATE TABLE [dbo].[Resources] (
    [UniqueID]     INT            IDENTITY (1, 1) NOT NULL,
    [ResourceID]   INT            NOT NULL,
    [ResourceName] NVARCHAR (50)  NULL,
    [Color]        INT            NULL,
    [Image]        IMAGE          NULL,
    [CustomField1] NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_Resources] PRIMARY KEY CLUSTERED ([UniqueID] ASC)
);


;--GO
PRINT N'Creating [dbo].[Sections]...';


;--GO
CREATE TABLE [dbo].[Sections] (
    [SectionName]             NVARCHAR (100) NOT NULL,
    [SectionNameAbbreviation] NVARCHAR (50)  NULL,
    CONSTRAINT [PK_Sections] PRIMARY KEY CLUSTERED ([SectionName] ASC)
);


;--GO
PRINT N'Creating [dbo].[SMSLogs]...';


;--GO
CREATE TABLE [dbo].[SMSLogs] (
    [ID]          INT            IDENTITY (1, 1) NOT NULL,
    [UserID]      NVARCHAR (50)  NULL,
    [Operation]   NVARCHAR (200) NULL,
    [PhoneNumber] NVARCHAR (30)  NULL,
    [Date]        DATETIME2 (7)  NULL,
    CONSTRAINT [PK_SMS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


;--GO
PRINT N'Creating [dbo].[SMSMessageTemplates]...';


;--GO
CREATE TABLE [dbo].[SMSMessageTemplates] (
    [TemplatesID]     INT            IDENTITY (1, 1) NOT NULL,
    [TemplateName]    NVARCHAR (60)  NULL,
    [TemplateMessage] NVARCHAR (600) NULL,
    [MessageHolder]   NVARCHAR (100) NULL,
    [MessageID]       INT            NULL,
    CONSTRAINT [PK_SMSMessageTemplates] PRIMARY KEY CLUSTERED ([TemplatesID] ASC)
);


;--GO
PRINT N'Creating [dbo].[SMSSettings]...';


;--GO
CREATE TABLE [dbo].[SMSSettings] (
    [SMSSettingsID]        INT             IDENTITY (1, 1) NOT NULL,
    [Provider]             NVARCHAR (100)  NULL,
    [CompanyName]          NVARCHAR (100)  NULL,
    [Token]                NVARCHAR (100)  NULL,
    [CountryPhoneDialCode] NVARCHAR (50)   NOT NULL,
    [AccountID]            NVARCHAR (100)  NULL,
    [CostSMS]              DECIMAL (18, 5) NULL,
    [IsDefault]            NVARCHAR (50)   NULL,
    [IsEnabled]            NVARCHAR (50)   NULL,
    CONSTRAINT [PK_SMSSettings] PRIMARY KEY CLUSTERED ([SMSSettingsID] ASC)
);


;--GO
PRINT N'Creating [dbo].[Students]...';


;--GO
CREATE TABLE [dbo].[Students] (
    [StudentID]          INT            IDENTITY (1, 1) NOT NULL,
    [StudentNumber]      NVARCHAR (50)  NOT NULL,
    [Section]            NVARCHAR (50)  NULL,
    [EnrolmentDate]      DATE           NOT NULL,
    [Class]              NVARCHAR (50)  NOT NULL,
    [StudentSurname]     NVARCHAR (60)  NOT NULL,
    [StudentFirstNames]  NVARCHAR (60)  NOT NULL,
    [Gender]             NVARCHAR (50)  NOT NULL,
    [DateBirth]          DATE           NULL,
    [Age]                NVARCHAR (50)  NULL,
    [Nationality]        NVARCHAR (50)  NULL,
    [LastSchoolAttended] NVARCHAR (50)  NULL,
    [LastSchoolResult]   NVARCHAR (50)  NULL,
    [PassPercentage]     NVARCHAR (50)  NULL,
    [StudentEmail]       NVARCHAR (100) NULL,
    [StudentPhoneNumber] NVARCHAR (50)  NULL,
    [HomeLanguage]       NVARCHAR (100) NULL,
    [Religion]           NVARCHAR (100) NULL,
    [MedicalAllergies]   NVARCHAR (150) NULL,
    [StudentSibling]     NVARCHAR (50)  NULL,
    [SiblingsNo]         TINYINT        NULL,
    [DocumentSubmitted]  TINYINT        NULL,
    [FatherSurname]      NVARCHAR (100) NULL,
    [FatherNames]        NVARCHAR (100) NULL,
    [FatherContactNo]    NVARCHAR (50)  NULL,
    [FatherEmail]        NVARCHAR (100) NULL,
    [NotificationNo]     NVARCHAR (50)  NULL,
    [NotificationEmail]  NVARCHAR (100) NULL,
    [MotherSurname]      NVARCHAR (100) NULL,
    [MotherNames]        NVARCHAR (100) NULL,
    [MotherContactNo]    NVARCHAR (50)  NULL,
    [MotherEmail]        NVARCHAR (100) NULL,
    [HomeAddress]        NVARCHAR (200) NULL,
    [EmergencyPhoneNo]   NVARCHAR (50)  NULL,
    [AbsencePhoneNo]     NVARCHAR (50)  NULL,
    [SchoolActivities]   NVARCHAR (50)  NULL,
    [SchoolPhotos]       NVARCHAR (50)  NULL,
    [SchoolYear]         NVARCHAR (50)  NOT NULL,
    [Cycle]              NVARCHAR (50)  NOT NULL,
    [TutorName]          NVARCHAR (100) NULL,
    [TutorProfession]    NVARCHAR (100) NULL,
    [FatherProfession]   NVARCHAR (100) NULL,
    [MotherProfession]   NVARCHAR (100) NULL,
    [Disabilities]       NVARCHAR (200) NULL,
    [StudentPicture]     IMAGE          NULL,
    CONSTRAINT [PK_Students] PRIMARY KEY CLUSTERED ([StudentID] ASC),
    CONSTRAINT [IX_Students] UNIQUE NONCLUSTERED ([StudentNumber] ASC)
);


;--GO
PRINT N'Creating [dbo].[FK_CourseFee_Classes]...';


;--GO
ALTER TABLE [dbo].[CourseFee]
    ADD CONSTRAINT [FK_CourseFee_Classes] FOREIGN KEY ([ClassName]) REFERENCES [dbo].[Classes] ([ClassName]) ON DELETE CASCADE ON UPDATE CASCADE;


;--GO
PRINT N'Creating [dbo].[FK_CourseFee_Fee]...';


;--GO
ALTER TABLE [dbo].[CourseFee]
    ADD CONSTRAINT [FK_CourseFee_Fee] FOREIGN KEY ([FeeName]) REFERENCES [dbo].[Fee] ([FeeName]) ON DELETE CASCADE ON UPDATE CASCADE;


;--GO
PRINT N'Creating [dbo].[FK_CourseFeePayment_Students]...';


;--GO
ALTER TABLE [dbo].[CourseFeePayment]
    ADD CONSTRAINT [FK_CourseFeePayment_Students] FOREIGN KEY ([StudentNumber]) REFERENCES [dbo].[Students] ([StudentNumber]) ON DELETE CASCADE ON UPDATE CASCADE;


;--GO
PRINT N'Creating [dbo].[FK_CourseFeePayment_Join_CourseFeePayment]...';


;--GO
ALTER TABLE [dbo].[CourseFeePayment_Join]
    ADD CONSTRAINT [FK_CourseFeePayment_Join_CourseFeePayment] FOREIGN KEY ([C_PaymentID]) REFERENCES [dbo].[CourseFeePayment] ([CourseFeePaymentID]) ON DELETE CASCADE ON UPDATE CASCADE;


;--GO
PRINT N'Creating [dbo].[FK_Discount_Students]...';


;--GO
ALTER TABLE [dbo].[Discount]
    ADD CONSTRAINT [FK_Discount_Students] FOREIGN KEY ([StudentID]) REFERENCES [dbo].[Students] ([StudentID]);


;--GO
PRINT N'Creating [dbo].[FK_Students_AcademicYear]...';


;--GO
ALTER TABLE [dbo].[Students]
    ADD CONSTRAINT [FK_Students_AcademicYear] FOREIGN KEY ([SchoolYear]) REFERENCES [dbo].[AcademicYear] ([SchoolYear]) ON UPDATE CASCADE;


;--GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
--initial data to login. Default user

if not exists (select * from dbo.Registration where UserName = 'bindu' and UserPassword = 'ZnVuZ3VsYQ==' 
 and UserType = 'Administrator' and Name = 'Bindu' and Surname = 'Technology' 
 and PhoneNumber ='0027793957155' and Email = 'info@bindu.co.za' and EmployeeNumber = 'EM-000001')
 
 begin

 insert into dbo.Registration (UserName,UserPassword,UserType,Name,Surname,PhoneNumber,Email,EmployeeNumber)
 values ('bindu' ,'ZnVuZ3VsYQ==','Administrator','Bindu','Technology','0027793957155', 'info@bindu.co.za', 'EM-000001');

 --initial sms templates
 insert into dbo.SMSMessageTemplates (TemplateName,TemplateMessage,MessageHolder,MessageID)
 values ('Notification de paiement', 'Bonjour cher parents, élève {0} {1} vient de payer {2}$ des frais scolaire avec succès. Merci bcp pour votre confiance.', '{0} = Nom, {1} = prénoms, {2} = Total Payé, {3} = Reste à payer', 1);
 
 insert into dbo.SMSMessageTemplates (TemplateName,TemplateMessage,MessageHolder,MessageID)
 values ('Invitation Parent', 'Cher Parent {0}, Vous etes cordialement invités à rehausser de votre présence à l''école pour un entretien particulier sur l''évolution de notre élève {1} à partir de ---. NB: Vu l''importance, votre présence est obligatoire et le respect de l''heure est rigueur. Franche collaboration.', '{0} = Nom du Parent, {1} = Nom de l’élève', 2);
 
 insert into dbo.SMSMessageTemplates (TemplateName,TemplateMessage,MessageHolder,MessageID)
 values ('Demande de paiement frais scolaires', 'Cher Parents, nous vous informons que l''élève qui ne s''acquittera pas de frais scolaire de la --- qu''a partir du --- ne sera pas admis en classe. SVP ignorer si vous etes déjà en règle', ' ', 3);

 insert into dbo.SMSMessageTemplates (TemplateName,TemplateMessage,MessageHolder,MessageID)
 values ('Demande de paiement Cantine', 'Chers parents, nous vous informons que si votre enfant est abonné à la cantine de passer payer la consommation mensuelle avant la fin du mois ---. SVP ignorer si vs etes déjà en règle', ' ', 4);

 insert into dbo.SMSMessageTemplates (TemplateName,TemplateMessage,MessageHolder,MessageID)
 values ('Demande de paiement Bus', 'Chers parents, nous vous informons que l''élève qui ne seras pas en ordre avec le frais d''abonnement du bus n''aura pas accès qu''a partir du ---', ' ', 5);

end
;--GO

;--GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'EduXpressDB', 'ON';
    END


;--GO
PRINT N'Update complete.';


;--GO
